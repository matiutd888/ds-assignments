plan
    1. Implementacja RegisterClient
        Implementujemy cancelanble registerclient, który co jakiś (spory) czas będzie przesyłał dwukrotnie wszystkie wiadomości pochodzące z danego request_id
        Po skończeniu request_id usuwamy je

        UWAGA na nadpisywanie request id w danym sektorze - wtedy operacja nigdy się nie skończy 
    2.  Użycie UUID wiadomości w celach identyfikacji, czy dana wiadomość jest powtórką czy nie (trzymamy set UUID wiadomości dla każdego register identifier)


Pytania
    - Jak ma się zachować nasz register jak dostanie od klienta operację na sector kiedy poprzednia operacja nie została jeszcze skończona?
    - Czym u licha jest request Identifier








Odpowiedziane
    - Czy będą unit testy na moduł AtomicRegister? 
        Jeśli tak, to powinienem zapewnić że atomicregister działa bez predefiniowanego zbioru modułów
        Wtedy będę musiał zaimplementować mapę SectorIdx -> pola atomic register

        TAK,
    - Czy nasze rozwiązanie ma umieć parsować odpowiedzi systemu?
        NIE MUSI 
    - W ogólności - czy każdy z modułów będzie unit testowany???
        TAK DEBILU
moduły
AtomicRegister 
    dostaje gotowe, już sparsowane komendy i je przerabia
    Używa RegisterClient by komunikować się z innymi modułami, wysyłając im odowiednie wiadomości

    Każdy atomic register odpowiada predefiniowanej liczbie sektorów, 
    dlatego nie jest problemem współbieżność

    Zostanie zaimplementowany w tkai sposób, by była przetwarzana jedna wiadomosć klienta naraz

    Czytamy od klienta dopiero kiedy skończy się poprzednia wiadomość.

RegisterClient
    dostaje komendy do innych procesów  i je wysyła 
    Musi implementować stubborn linki
    To znaczy mniej więcej tyle że wysyła wszystkie wiadomości co jakiś czas?

    Jeżeli chcielibyśmy implenentować stubborn linki za pomocą wysyłania odpowiedzi, 
    to w jakiej metodzie byłyby one deserializowane?

    Można zrobić jak prosto, 
    czyli nie wysyłać potwierdzeń a jedynie poprzestawać wysyłanie wiadomości dotyczących sektora po przetworzeniu jego wiadomości (callback zawołany)

Deserializer
    czyta z tcp aż dostanie magic number, deserializuej komendę


run_register_process buduje moduł atomowego rejestru oraz register client


--------------------------------

"There can be multiple clients, 
and different clients can each 
send a command with the same sector index at the same time"

"We suggest using a TCP buffer itself as the queue"

"It is suggested that messages sent by a process 
to itself should skip serialization, deserialization, 
HMAC preparation and validation phases to improve the performance."

- Czy jeden AtomicRegister jest rozmiaru SEKTORA?
- Czemu HMAC tag jest kilka razy???
- Co to są ackknowledgements???


Implementujemy Block Device 
- Driver komunikuje siję z naszym atomic registerem
- Atomic register jest block Device
- Każdy SECTOR to osobna wartość nazywająca się REGISTER
- Jeden proces rozproszonego rejestru to osobny linux process

Plan
- napisać komunikację za pomocą TCP (wszystkie interfejsy)
- Stubborn links + stable storage
- W jaki sposób wykorzystujemy stable storage???

AtomicRegister - na jednej maszynie jeden sektor to jeden atomowy rejestr
- jeden atomowy rejestr może odpowiadać na wiadomości do wielu sektorów
- To avoid collisions between messages from different reads and writes you can use the UUID field.

StableStorage
- Co w nim w zasadzie trzymamy? Metadata do algorytmu. Ale jakie metadata?